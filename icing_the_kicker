import pandas as pd
from scipy.stats import chi2_contingency

## thanks to Ron Yurko (ryurko) for the data

df = pd.read_csv('play by play 2019-2015.csv')
df['field_goal_result'].replace({'blocked':'missed'},inplace=True)


##### GET ALL FGs TO TIE OR WIN (-3 TO 0 SCORE DIFFERENTIAL) WITH LESS THAN 1 MINUTE ON THE CLOCK IN THE 4TH QUARTER #####

reg_FG = df[(df['play_type']=='field_goal') & (df['score_differential'].shift(1) <= 0) & (df['score_differential'].shift(1) >= -3)
         & (df['qtr']==4) & (df['quarter_seconds_remaining'] <= 60)]

# calculate success percentage for 4th quarter FGs

reg_made = reg_FG['field_goal_result'].value_counts()['made']
reg_miss = reg_FG['field_goal_result'].value_counts()['missed']
reg_total = reg_made + reg_miss
reg_success = round((reg_made/reg_total)*100,2)

print('FG Made: '+str(reg_made),'Total FG: '+str(reg_total),'Accuracy: '+str(reg_success)+'%', sep='\n')


##### GET ALL FGs TO TIE OR WIN (-3 TO 0 SCORE DIFFERENTIAL) WITH LESS THAN 1 MINUTE ON THE CLOCK IN OVERTIME #####

ot_FG = df[(df['play_type']=='field_goal') & (df['score_differential'].shift(1) <= 0) & (df['score_differential'].shift(1) >= -3)
         & (df['qtr']==5)]

# calculate success percentage for overtime FGs

ot_made = ot_FG['field_goal_result'].value_counts()['made']
ot_miss = ot_FG['field_goal_result'].value_counts()['missed']
ot_total = ot_made + ot_miss
ot_success = round((ot_made/ot_total)*100,2)

print('FG Made: '+str(ot_made),'Total FG: '+str(ot_total),'Accuracy: '+str(ot_success)+'%', sep='\n')


##### APPEND THE TWO DATA FRAMES #####

all_FG = reg_FG.append(ot_FG)

# calculate success percentage for FGs

all_made = all_FG['field_goal_result'].value_counts()['made']
all_miss = all_FG['field_goal_result'].value_counts()['missed']
all_total = len(all_FG)
all_success = round((all_made/all_total)*100,2)

print('FG Made: '+str(all_made),'Total FG: '+str(all_total),'Accuracy: '+str(all_success)+'%', sep='\n')


##### CHECK IF A TIMEOUT WAS CALLED THE PLAY BEFORE #####

# get a list of the indexes of these field goals

fg_list = all_FG.index.values.tolist()

# get list of indexes of play before field goals

new_list = [x-1 for x in fg_list]

# join the two lists

lista = fg_list + new_list

# select rows based on the merged list

kicks = df.loc[lista]

# reset the index and resort the values so that consequent plays are near

kicks.reset_index(inplace=True)
kicks.sort_values(by='index',inplace=True)


##### FGs WHERE THERE WAS NOT A TIMEOUT CALLED (timeout = 0) IN THE ROW BEFORE #####

no_timeout = kicks[(kicks['play_type']=='field_goal') & (kicks['timeout'].shift(1)==0)]

no_timeout_made = no_timeout['field_goal_result'].value_counts()['made']
no_timeout_miss = no_timeout['field_goal_result'].value_counts()['missed']
no_timeout_success = round((no_timeout_made/len(no_timeout))*100,2)

print('FG Made: '+str(no_timeout_made),'Total FG: '+str(len(no_timeout)),'Accuracy: '+str(no_timeout_success)+'%', sep='\n')


##### FGs WHERE THERE WAS A TIMEOUT CALLED (timeout = 1) BY ATTACKING TEAM IN THE ROW BEFORE #####

off_team = kicks[(kicks['play_type']=='field_goal') & (kicks['timeout'].shift(1)==1) & 
             (kicks['timeout_team'].shift(1)==kicks['posteam'].shift(1))]

off_team_made = off_team['field_goal_result'].value_counts()['made']
off_team_miss = off_team['field_goal_result'].value_counts()['missed']
off_team_success = round((off_team_made/len(off_team))*100,2)

print('FG Made: '+str(off_team_made),'Total FG: '+str(len(off_team)),'Accuracy: '+str(off_team_success)+'%', sep='\n')


##### FGs WHERE THERE WAS A TIMEOUT CALLED (timeout = 1) BY OPPOSING TEAM IN THE ROW BEFORE #####

iced = kicks[(kicks['play_type']=='field_goal') & (kicks['timeout'].shift(1)==1) & 
             (kicks['timeout_team'].shift(1)!=kicks['posteam'].shift(1))]

iced_made = iced['field_goal_result'].value_counts()['made']
iced_miss = iced['field_goal_result'].value_counts()['missed']
iced_success = round((iced_made/len(iced))*100,2)

print('FG Made: '+str(iced_made),'Total FG: '+str(len(iced)),'Accuracy: '+str(iced_success)+'%', sep='\n')


##### ICED vs. NON-ICED FGs #####

non_iced_made = off_team_made + no_timeout_made
non_iced_miss = off_team_miss+ no_timeout_miss

# creating the contingency table

cont_table = pd.DataFrame(
    [
        [iced_made,iced_miss],
        [non_iced_made,non_iced_miss]
    ],
    index=["iced","non_iced"],
    columns=["made","miss"])

# chi square test

chi_value = chi2_contingency(cont_table)[0]
p_value = chi2_contingency(cont_table)[1]
degree_of_freedom = chi2_contingency(cont_table)[2]

print("Chi value is " + str(chi_value),"P-Value is " + str(p_value), sep='\n')


##### TIMEOUTS LEFT FOR DEFENDING TEAM IN REGULATION (COULD THEY HAVE ICED THE KICKER?) #####

non_iced = off_team.append(no_timeout)
reg_non_iced = non_iced.loc[non_iced['qtr']==4]
reg_non_iced['defteam_timeouts_remaining'].value_counts().sort_index()


##### WHICH KICKERS SUFFERED THE MOST FROM BEING ICED? #####

tot_kickers = iced.groupby(by=['kicker_player_name'])[['play_type']].count().sort_values(by='play_type',ascending=False).rename(columns={'play_type':'total_fg'})

made_kickers = iced.groupby(by=['kicker_player_name','field_goal_result'])[['play_type']].count().sort_values(by=[
    'play_type','kicker_player_name','field_goal_result'],ascending=False).rename(columns={'play_type':'made_fg'})
made_kickers = made_kickers.reset_index().set_index('kicker_player_name')

kickers = tot_kickers.join(made_kickers.loc[made_kickers['field_goal_result']=='made'], how='inner')[['made_fg','total_fg']]
kickers['accuracy'] = round((kickers['made_fg']/kickers['total_fg'])*100,2)
kickers.sort_values(by='accuracy').head()
